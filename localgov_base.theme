<?php

/**
 * @file
 * Theme hooks to support the LocalGov Base Theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function localgov_base_form_system_theme_settings_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  $form['localgov_base_remove_css'] = [
    '#type'          => 'checkbox',
    '#title'         => t('Remove CSS libraries from base theme.'),
    '#default_value' => theme_get_setting('localgov_base_remove_css'),
    '#description'   => t("Check this box to disable the base theme's CSS"),
  ];

  $form['localgov_base_remove_js'] = [
    '#type'          => 'checkbox',
    '#title'         => t('Remove JS libraries from base theme.'),
    '#default_value' => theme_get_setting('localgov_base_remove_js'),
    '#description'   => t("Check this box to disable the base theme's JavaScript"),
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function localgov_base_preprocess_page(&$variables) {
  // Work around for Drupal core issue.
  // Blocks employ lazy building.  This makes it difficult to determine from
  // **Twig templates** if they will eventually produce empty content or not.
  // @see https://www.drupal.org/node/953034
  // @see https://www.drupal.org/forum/support/module-development-and-code-questions/2016-04-07/drupal-8-regions-with-and-empty#comment-12149518
  $system_region = system_region_list('localgov_base', $show = REGIONS_ALL);

  foreach ($system_region as $key => $value) {
    $region = $key;
    $has = 'has_' . $region;

    $excluded_regions = [
      'messages',
    ];

    if (!in_array($region, $excluded_regions)) {
      $copy = $variables['page'][$region];
      $rendered = Drupal::service('renderer')->renderPlain($copy);
    }
    else {
      $rendered = Drupal::service('renderer')->renderPlain($variables['page'][$region]);
    }
    $variables[$has] = !empty(trim(strip_tags($rendered)));
  }
  $variables['has_sidebars'] = $variables['has_sidebar_first'] || $variables['has_sidebar_second'];

  if (!isset($variables['localgov_base_remove_css'])) {
    $variables['#attached']['library'][] = 'localgov_base/global';
  }
}

/**
 * Implements hook_preprocess_file_link().
 *
 * Changes:
 * - Inserts file *type* and size into the theme variable.
 * - Reformats file size.  Example: 123.4KB.
 * - Appends file metadata to the file link text.
 *
 * @see template_preprocess_file_link()
 */
function localgov_base_preprocess_file_link(&$variables) {

  $file = $variables['file'];
  $filename = $file->getFilename();
  $file_extension = pathinfo($filename, PATHINFO_EXTENSION);

  $variables['file_type'] = strtoupper($file_extension);

  // 123.45 KB -> 123.45KB
  $variables['file_size'] = strtr($variables['file_size'], [' ' => '']);

  $variables['link']['#title'] = [
    '#markup' => "{$variables['link']['#title']} <span class=\"file-meta\">(<span class=\"file-type\">{$variables['file_type']}</span>, <span class=\"file-size\">{$variables['file_size']}</span>)</span>",
  ];
}

/**
 * Implements hook_views_pre_render().
 */
function localgov_base_views_pre_render(ViewExecutable $view) {
  if (isset($view) && ($view->storage->id() == 'localgov_sitewide_search')) {
    $view->element['#attached']['library'][] = 'localgov_base/sitewide-search';
  }
}
